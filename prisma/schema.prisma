// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaypalAccessToken {
    /// comma separated list of scopes
    scope String
    access_token String @id
    token_type String
    app_id String
    /// seconds until expiry
    expires_in Int
    nonce String
    createdAt DateTime @default(now())
    /// Final balance or deposit
    account String
}

model User {
    id            String    @id @default(cuid())
    /// can be the user's full name (set by oauth provider) or just first name if changed by user
    name          String?
    given_name    String?
    family_name   String?
    surname       String?
    role          Role          @default(client)
    email         String        @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    accounts      Account[]
    sessions      Session[]
    instruments   Instrument[]
    jobs          Job[]
    bookings      Event[]       @relation("bookings")
    lastSignIn    DateTime?
}

enum Role {
    client
    musician
    admin
    superAdmin
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model EventType {
    id         String @id @default(cuid())
    name       String     @unique
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    events     Event[]
}

model Event {
    id                         String   @id @default(cuid())
    name                       String       @unique
    date                       DateTime
    InstrumentsRequired        Json
    location                   String?
    price                      Float        @default(0)
    deposit                    Float        @default(0)
    clientDepositInvoiceUrl    String?
    clientFinalInvoiceUrl      String?
    adminDepositInvoiceUrl     String?
    adminFinalInvoiceUrl       String?
    depositInvoiceSent         Boolean      @default(false)
    finalInvoiceSent           Boolean      @default(false)
    depositInvoiceId           String?      @unique
    finalInvoiceId             String?      @unique
    createdAt                  DateTime     @default(now())
    updatedAt                  DateTime     @updatedAt
    ownerId                    String
    owner                      User         @relation("bookings", fields: [ownerId], references: [id])
    eventTypeId                String
    EventType                  EventType    @relation(fields: [eventTypeId], references: [id])
    packages                   Package[]
    Equipment                  Equipment[]
    jobs                       Job[]
    contract                   Contract?
    status                     String       @default("booked")
    clientEditLockNumOfDays    Int          @default(14)
    sets                       Set[]
}

model Set {
    id         String   @id @default(cuid())
    name       String   @unique
    startTime  DateTime
    endTime    DateTime
    location   String
    packageId  String
    package    Package  @relation(fields: [packageId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    goodSongs  Song[] @relation("goodSongs")
    badSongs   Song[] @relation("badSongs")
    eventId    String
    event      Event    @relation(fields: [eventId], references: [id])
}

model Song {
    id         String   @id @default(cuid())
    name       String   @unique
    artist     String
    goodSongs  Set[] @relation("goodSongs")
    badSongs   Set[] @relation("badSongs")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    packages   Package[]
}

model Contract {
    /// id = "key" of the file. "key" is uploadthing terminology
    id           String         @id @default(cuid())
    name         String
    url          String
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
    eventId      String             @unique
    event        Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
    signatureUrl String?
}

model GeneralDocument {
    /// id = "key" of the file. "key" is uploadthing terminology
    id           String         @id @default(cuid())
    name         String             @unique
    description  String
    url          String
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
}

model Job {
    id           String   @id @default(cuid())
    pay          Float
    isMd         Boolean
    notes        String?
    status       String  @default("pending")
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
    musicianId   String
    musician     User     @relation(fields: [musicianId], references: [id])
    eventId      String
    event        Event   @relation(fields: [eventId], references: [id])
    Instruments  Instrument[]
    hotelNeeded  Boolean @default(false)
    hotelBooked  Boolean @default(false)
    hotelInfo    String?
    invoice      Invoice?

    @@unique([musicianId, eventId])
}

model Instrument {
    id         String  @id @default(cuid())
    name       String      @unique
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    musicians  User[]
    jobs       Job[]
}

model Package {
    id              String   @id @default(cuid())
    name            String   @unique
    basePrice       Int?
    description     String?
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    events          Event[]
    sets            Set[]
    songs           Song[]
}

model Equipment {
    id         String   @id @default(cuid())
    name       String   @unique
    quanitity  Int
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    events     Event[]
}

model Wages {
    id         String   @id @default(cuid())
    name       String   @unique
    amount     String
    createdAt  DateTime           @default(now())
    updatedAt  DateTime           @updatedAt
}

model Invoice {
    id           String   @id @default(cuid()) 
    url          String
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt
    jobId        String             @unique
    Job          Job     @relation(fields: [jobId], references: [id])
    status       String  @default("due")
}
