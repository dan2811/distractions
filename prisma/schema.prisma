// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaypalAccessToken {
    /// comma separated list of scopes
    scope String
    access_token String @id
    token_type String
    app_id String
    /// seconds until expiry
    expires_in Int
    nonce String
    createdAt DateTime @default(now())
}

model User {
    id            String    @id @default(cuid())
    name          String?
    role          Role          @default(client)
    email         String       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    gigs          Event[]       @relation("gigs")
    instruments   Instrument[]
    bookings      Event[]       @relation("bookings")
    phone         String?
}

enum Role {
    client
    musician
    admin
    superAdmin
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model EventType {
    id         String   @id @default(cuid())
    name       String   @unique
    events     Event[]
}

model Event {
    id                  String   @id @default(cuid())
    name                String       @unique
    ownerId             String
    owner               User         @relation("bookings", fields: [ownerId], references: [id])
    musicians           User[]       @relation("gigs")
    date                String
    packages            Package[]
    eventTypeId         String
    EventType           EventType    @relation(fields: [eventTypeId], references: [id])
    Equipment           Equipment[]
    location            String?
    price               Float       @default(0)
    clientDepositInvoiceUrl    String?
    clientFinalInvoiceUrl      String?
    adminDepositInvoiceUrl     String?
    adminFinalInvoiceUrl       String?
}

model Job {
    id           String   @id @default(cuid())
    musicianId   String
    eventId      String
    pay          Float
    Instruments  Instrument[]
    isMd         Boolean
    notes        String?
    status     String  @default("pending")

    @@unique([musicianId, eventId])
}

model Instrument {
    id         String   @id @default(cuid())
    name       String   @unique
    musicians  User[]
    jobs       Job[]
}

model Package {
    id         String   @id @default(cuid())
    name       String   @unique
    basePrice      Int
    description String
    events      Event[]
}

model Equipment {
    id         String   @id @default(cuid())
    name       String   @unique
    quanitity  Int
    events      Event[]
}