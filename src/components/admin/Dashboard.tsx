import {
  Paper,
  Table,
  TableBody,
  TableCell,
  TableRow,
  Typography,
  colors,
} from "@mui/material";
import BlockIcon from "@mui/icons-material/Block";
import Card from "@mui/material/Card";
import CardContent from "@mui/material/CardContent";
import Grid2 from "@mui/material/Unstable_Grid2/Grid2";
import { useSession } from "next-auth/react";
import { Loading, Title } from "react-admin";
import { api } from "~/utils/api";

const About = () => {
  return (
    <Paper>
      <Typography variant="h4">How to:</Typography>
      <Typography variant="h6" mt={2}>
        Navigation
      </Typography>
      <Typography variant="body1">
        <ul style={{ listStyle: "inside" }}>
          <li>
            Use the main menu (top left) to navigate through different entities.
          </li>
          <li>
            Click the profile icon (top right) to logout or go back to the main
            app.
          </li>
        </ul>
      </Typography>
      <Typography variant="h6" mt={2}>
        Entities
      </Typography>
      <Typography variant="body1">
        Each entity is made up of:
        <ul style={{ listStyle: "inside" }}>
          <li>List page - an overview of every item</li>
          <li>
            Show page - a detailed view of a single item and its relations
          </li>
          <li>Edit page - a form to edit the details of the item</li>
          <li>Create page - a form to create a new item</li>
        </ul>
      </Typography>
      <Typography variant="h6" mt={2}>
        Intended workflow
      </Typography>
      <Typography variant="body1">
        The system has been designed with the following workflow in mind,{" "}
        <strong>after</strong> a booking comes in and the initial details have
        been agreed with the client:
      </Typography>
      <Typography variant="body1" mt={1}>
        <ol
          style={{
            listStyleType: "-moz-initial",
            listStylePosition: "inside",
          }}
        >
          <li>
            Admin creates a new client and event, and assigns the event to the
            client. When the event is created a draft invoice is automatically
            generated by paypal.
          </li>
          <li>
            Admin offers the gig out to musicians by adding them to the event.
          </li>
          <li>Musicians log in and accept/decline the gig.</li>
          <li>
            Admins view the draft invoice and make any amendments as necessary
            and then click the &quot;Send invoice&quot; button.
          </li>
          <li>
            Client logs in and updates the details of their event and makes
            their payments using the paypal integration.
          </li>
        </ol>
      </Typography>
      <Typography variant="body1" mt={2}>
        Future iterations of the app will extend this workflow to include
        musicians sending/uploading their invoices through this app and
        documents being automatically generated.
      </Typography>
    </Paper>
  );
};

const StatsError = ({ title, label }: { title: string; label: string }) => (
  <Paper
    variant="outlined"
    style={{
      backgroundColor: colors.blue[50],
      padding: 10,
    }}
  >
    <Typography variant="h5">{title}</Typography>
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyItems: "center",
        gap: 10,
      }}
    >
      <BlockIcon
        color="error"
        sx={{
          fontSize: 50,
        }}
      />
      <Typography color="red">
        There was an error getting {label} from send grid.
      </Typography>
    </div>
  </Paper>
);

const EmailStats = () => {
  const { data, dataUpdatedAt, isLoading, isError } =
    api.stats.getSendGridStats.useQuery();

  if (isLoading) return <Loading loadingPrimary="Getting Email stats" />;

  if (data?.[0].statusCode !== 200 || isError)
    return <StatsError title="Email" label="email stats" />;
  return (
    <Paper
      variant="outlined"
      style={{
        backgroundColor: colors.blue[50],
        padding: 10,
      }}
    >
      <Typography variant="h5">Email</Typography>
      <Typography variant="caption">
        Last updated: {new Date(dataUpdatedAt).toLocaleTimeString("en-GB")}
      </Typography>
      <br />
      <Typography variant="caption">
        These stats only apply to emails sent by the system
      </Typography>
      <Table>
        <TableBody>
          <TableRow>
            <TableCell>
              <Typography>Delivered</Typography>
            </TableCell>
            <TableCell>
              <Typography>{data[1][0]?.stats[0]?.metrics.delivered}</Typography>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell>
              <Typography>Requests used</Typography>
              <Typography variant="caption">Limit is 100 per day</Typography>
            </TableCell>
            <TableCell>
              <Typography>{data[1][0]?.stats[0]?.metrics.requests}</Typography>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell>
              <Typography>Invalid emails</Typography>
            </TableCell>
            <TableCell>
              <Typography>
                {data[1][0]?.stats[0]?.metrics.invalid_emails}
              </Typography>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell>
              <Typography>Reported as spam</Typography>
            </TableCell>
            <TableCell>
              <Typography>
                {data[1][0]?.stats[0]?.metrics.spam_reports}
              </Typography>
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </Paper>
  );
};

const AppStats = () => {
  const { data, isLoading, error, isError } = api.stats.getAppStats.useQuery();
  if (isLoading) return <Loading loadingPrimary="Getting app stats..." />;

  if (isError) return <StatsError title="Email" label="email stats" />;
  return (
    <Paper
      variant="outlined"
      style={{
        backgroundColor: colors.blue[50],
        padding: 10,
      }}
    >
      <Typography variant="h5">App</Typography>
      <Table>
        <TableBody>
          <TableRow>
            <TableCell>
              <Typography>Users</Typography>
            </TableCell>
            <TableCell>
              <Typography>{data.totalUsers}</Typography>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell>
              <Typography>Current active users</Typography>
            </TableCell>
            <TableCell>
              <Typography>{data.totalSessions}</Typography>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell>
              <Typography>Events</Typography>
            </TableCell>
            <TableCell>
              <Typography>{data.totalEvents}</Typography>
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </Paper>
  );
};

const Stats = () => {
  return (
    <Card>
      <CardContent>
        <Typography variant="h3">Stats</Typography>
        <Grid2 container spacing={3}>
          <Grid2 xs={6}>
            <EmailStats />
          </Grid2>
          <Grid2 xs={6}>
            <AppStats />
          </Grid2>
        </Grid2>
      </CardContent>
    </Card>
  );
};

const Dashboard = () => {
  const session = useSession();
  const user = session?.data?.user;

  return (
    <Card sx={{ marginTop: 1 }}>
      <Title title="Admin console" />
      <CardContent>
        <Typography variant="h4">
          Hello{user?.name ? " " + user.name : ""},
        </Typography>
        <br />
        <Typography variant="h5">Welcome to the admin console.</Typography>
        <Stats />
        <About />
      </CardContent>
    </Card>
  );
};

export default Dashboard;
